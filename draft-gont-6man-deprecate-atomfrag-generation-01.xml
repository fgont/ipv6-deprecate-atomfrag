<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc strict="no" ?>

<rfc 
	ipr="trust200902"
	category="std"
	updates="2460, 6145"
	docName="draft-gont-6man-deprecate-atomfrag-generation-01">
  <front>
    <title abbrev="Deprecate Generation of IPv6 Atomic Frags">Deprecating the Generation of IPv6 Atomic Fragments</title>

    <author fullname="Fernando Gont" initials="F." surname="Gont">
      <organization abbrev="SI6 Networks / UTN-FRH">SI6 Networks / UTN-FRH</organization>

      <address>
        <postal>
          <street>Evaristo Carriego 2644</street>
          <code>1706</code>
          <city>Haedo</city>
          <region>Provincia de Buenos Aires</region>
          <country>Argentina</country>
        </postal>

        <phone>+54 11 4650 8472</phone>
        <email>fgont@si6networks.com</email>
        <uri>http://www.si6networks.com</uri>
      </address>
    </author>

<author fullname="Will(Shucheng) Liu" initials="W." surname="Liu">
      <organization>Huawei Technologies</organization>
      <address>
        <postal>
          <street>Bantian, Longgang District</street>
          <city>Shenzhen</city>
          <code>518129</code>
          <country>P.R. China</country>
        </postal>
        <email>liushucheng@huawei.com</email>
      </address>
</author>

<author fullname="Tore Anderson" initials="T.A." surname="Anderson">
<organization>Redpill Linpro</organization>
<address>
<postal>
<street>Vitaminveien 1A</street>
<city>NO-0485 Oslo</city>
<country>NORWAY</country>
</postal>
<phone>+47 959 31 212</phone>
<email>tore@redpill-linpro.com</email>
</address>
</author>

    <date year="2014" />

    <area>Internet</area>
    <workgroup>IPv6 maintenance Working Group (6man)</workgroup>



    <abstract>
    <t>
The core IPv6 specification requires that when a host receives an ICMPv6 "Packet Too Big" message reporting a "Next-Hop MTU" smaller than 1280, the host includes a Fragment Header in all subsequent packets sent to that destination, without reducing the assumed Path-MTU. The simplicity with which ICMPv6 "Packet Too Big" messages can be forged, coupled with the widespread filtering of IPv6 fragments, results in an attack vector that can be leveraged for Denial of Service purposes. This document briefly discusses the aforementioned attack vector, and formally updates RFC2460 such that generation of IPv6 atomic fragments is deprecated, thus eliminating the aforementioned attack vector. Additionally, it formally updates RFC6145 such that the Stateless IP/ICMP Translation Algorithm (SIIT) does not rely on the generation of IPv6 atomic fragments.
</t>
    </abstract>
  </front>

  <middle>
  
<section title="Introduction" anchor="intro">
<t>

<xref target="RFC2460"/> specifies the IPv6 fragmentation mechanism, which allows IPv6 packets to be fragmented into smaller pieces such that they fit in the Path-MTU to the intended destination(s).</t>

<t>Section 5 of <xref target="RFC2460"/> states that, when a host receives an ICMPv6 "Packet Too Big" message <xref target="RFC4443"/> advertising a "Next-Hop MTU" smaller than 1280 (the minimum IPv6 MTU), the host is not required to reduce the assumed Path-MTU, but must simply include a Fragment Header in all subsequent packets sent to that destination. The resulting packets will thus *not* be actually fragmented into several pieces, but rather just include a Fragment Header with both the "Fragment Offset" and the "M" flag set to 0 (we refer to these packets as "atomic fragments"). As required by <xref target="RFC6946"/>, these atomic fragments are essentially processed by the destination host as non-fragment traffic (since there are not really any fragments to be reassembled). IPv6/IPv4 translators will typically employ the Fragment Identification information found in the Fragment Header to select an appropriate Fragment Identification value for the resulting IPv4 fragments.</t>

<t>While atomic fragments might seem rather benign, there are scenarios in which the generation of IPv6 atomic fragments can introduce an attack vector that can be exploited for denial of service purposes. Since there are concrete security implications arising from the generation of IPv6 atomic fragments, and there is no real gain in generating IPv6 atomic fragments (as opposed to e.g. having IPv6/IPv4 translators generate a Fragment Identification value themselves), this document formally updates <xref target="RFC2460"/>, forbidding the generation of IPv6 atomic fragments, such that the aforementioned attack vector is eliminated. Additionally, it formally updates <xref target="RFC6145"/> such that the Stateless IP/ICMP Translation Algorithm (SIIT) does not rely on the generation of IPv6 atomic fragments.</t>

<t><xref target="attack-vector"/> describes some possible attack scenarios. <xref target="additional-considerations"/> provides additional considerations regarding the usefulness of generating IPv6 atomic fragments. <xref target="update-rfc2460"/> formally updates RFC2460 such that this attack vector is eliminated. <xref target="update-rfc6145"/> formally updates RFC6145 such that it does not relies on the generation of IPv6 atomic fragments.</t>

</section>




<section title="Terminology" anchor="terminology">

<t>
<list style="hanging">
<t hangText="IPv6 atomic fragments">
<vspace blankLines="0" />IPv6 packets that contain a Fragment Header with the Fragment Offset set to 0 and the M flag set to 0 (as defined by <xref target="RFC6946"/>).</t>
</list>
</t>

    
         

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
   NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   RFC 2119 <xref target="RFC2119"/>.</t>
</section>

<section title="Denial of Service (DoS) attack vector" anchor="attack-vector">

<t>Let us assume that Host A is communicating with Server B, and that, as a result of the widespread filtering of IPv6 packets with extension headers (including fragmentation) <xref target="I-D.gont-v6ops-ipv6-ehs-in-real-world"/>, some intermediate node filters fragments between Host A and Server B.  If an attacker sends a forged ICMPv6 "Packet Too Big" (PTB) error message to server B, reporting a Next-Hop MTU smaller than 1280, this will trigger the generation of IPv6 atomic fragments from that moment on (as required by <xref target="RFC2460"/>). When server B starts sending IPv6 atomic fragments (in response to the received ICMPv6 PTB), these packets will be dropped, since we previously noted that packets with IPv6 EHs were being dropped between Host A and Server B. Thus, this situation will result in a Denial of Service (DoS) scenario.
</t>

<t>Another possible scenario is that in which two BGP peers are employing IPv6 transport, and they implement ACLs to drop IPv6 fragments (to avoid control-plane attacks). If the aforementioned BGP peers drop IPv6 fragments but still honor received ICMPv6 Packet Too Big error messages, an attacker could easily attack the peering session by simply sending an ICMPv6 PTB message with a reported MTU smaller than 1280 bytes. Once the attack packet has been fired, it will be the aforementioned routers themselves the ones dropping their own traffic.
</t>


<t>The aforementioned attack vector is exacerbated by the following factors:
<list style="symbols">
<t>The attacker does not need to forge the IPv6 Source Address of his attack packets. Hence, deployment of simple BCP38 filters will not help as a counter-measure.</t>

<t>Only the IPv6 addresses of the IPv6 packet embedded in the ICMPv6 payload need to be forged. While one could envision filtering devices enforcing BCP38-style filters on the ICMPv6 payload, the use of extension (by the attacker) could make this difficult, if at all possible.</t>

<t>Many implementations fail to perform validation checks on the received ICMPv6 error messages, as recommended in Section 5.2 of <xref target="RFC4443"/> and documented in <xref target="RFC5927"/>. It should be noted that in some cases, such as when an ICMPv6 error message has (supposedly) been elicited by a connection-less transport protocol (or some other connection-less protocol being encapsulated in IPv6), it may be virtually impossible to perform validation checks on the received ICMPv6 error messages. And, because of IPv6 extension headers, the ICMPv6 payload might not even contain any useful information on which to perform validation checks.</t>

<t>Upon receipt of one of the aforementioned ICMPv6 "Packet Too Big" error messages, the Destination Cache <xref target="RFC4861"/> is usually updated to reflect that any subsequent packets to such destination should include a Fragment Header. This means that a single ICMPv6 "Packet Too Big" error message might affect multiple communication instances (e.g., TCP connections) with such destination.
</t>
</list>
</t>
</section>

<section title="Additional Considerations" anchor="additional-considerations">
<t>Besides the security assessment provided in <xref target="attack-vector"/>, it is interesting to evaluate the pros and cons of having IPv6-to-IPv4 translating router rely on the generation of IPv6 atomic fragments.
</t>

<t>Relying on the generation of IPv6 atomic fragments implies a reliance on:
<list style="numbers">
<t>ICMPv6 packets arriving from the sending node to the destination node</t>
<t>Nodes receiving ICMPv6 PTB messages reporting an MTU smaller than 1280 bytes actually producing atomic fragments</t>
<t>Support for IPv6 fragmentation on the IPv6 side of the translator</t>
</list>

Unfortunately,
<list style="symbols">
<t>There exists a fair share of evidence of ICMPv6 Packet Too Big messages being dropped on the public Internet (for instance, that is one of the reasons for which the <xref target="RFC4821"/> was published). Therefore, relying on such messages being successfully delivered will affect the robustness of the protocol that relies on them.</t>
<t>A number of IPv6 implementations have been known to fail to generate IPv6 atomic fragments in response to ICMPv6 PTB messages reporting an MTU smaller than 1280 bytes <xref target="RFC6946"/> <xref target="Morbitzer"/>. Additionally, results included in Section 6 of <xref target="RFC6145"/> note that 57% of the tested web servers failed to produce IPv6 atomic fragments in response to ICMPv6 PTB messages reporting an MTU smaller than 1280 bytes. Thus, any protocol relying on IPv6 atomic fragment generation for proper functioning will have interoperability problems with the aforementioned IPv6 stacks.
</t>
<t>IPv6 atomic fragment generation represents a case in which fragmented traffic is produced where otherwise it would not be needed. Since there is widespread filtering of IPv6 fragments in the public Internet <xref target="I-D.gont-v6ops-ipv6-ehs-in-real-world"/>, this would mean that the (unnecessary) use of IPv6 fragmentation might result, unnecessarily, in a Denial of Service situation even in legitimate cases.
</t>
</list>
</t>

<t><xref target="RFC6145"/> is currently the only "consumer" of IPv6 atomic fragments, and it correctly and diligently notes (in Section 6) the possible interoperability problems of relying on IPv6 atomic fragments, proposing as a workaround something very similar to what we proposed in <xref target="update-rfc6145"/>. We believe that, by making the more robust behavior the default behavior of the "IP/ICMP Translation Algorithm", robustness is increased, and the corresponding code is simplified.
</t>
 
<!--
<t>Besides the security assessment provided in <xref target="attack-vector"/>, it is interesting to evaluate if there is any gain in generating IPv6 atomic fragments (to provide for Fragment Identification value) as opposed to just let IPv6/IPv4 translators select an appropriate IPv4 Fragment Identification value.</t>

<t>After some analysis, one can conclude that, if anything, an IPv6/IPv4 translator is in a much better position to select an appropriate Fragment Identification value for the packet that are to be translated from the IPv6 to the IPv4 world. For instance, an IPv6 node will generate Fragment Identification values without any knowledge of the Fragment ID values being generated by other IPv6 nodes employing the translator. Thus, an IPv6/IPv4 translator is in a much better position to generate Fragment IDs that will not result in collisions (i.e., that will not be reused for the same tuple {Source Address, Destination Address}.
</t>
-->
</section>


<section title="Updating RFC2460" anchor="update-rfc2460">

<t>The following text from Section 5 of <xref target="RFC2460"/>:
<list style="hanging">
<t>"In response to an IPv6 packet that is sent to an IPv4 destination
   (i.e., a packet that undergoes translation from IPv6 to IPv4), the
   originating IPv6 node may receive an ICMP Packet Too Big message
   reporting a Next-Hop MTU less than 1280.  In that case, the IPv6 node
   is not required to reduce the size of subsequent packets to less than
   1280, but must include a Fragment header in those packets so that the
   IPv6-to-IPv4 translating router can obtain a suitable Identification
   value to use in resulting IPv4 fragments.  Note that this means the
   payload may have to be reduced to 1232 octets (1280 minus 40 for the
   IPv6 header and 8 for the Fragment header), and smaller still if
   additional extension headers are used."</t>
</list>


is formally replaced with:

<list style="hanging">
<t>"An IPv6 node that receives an ICMPv6 Packet Too Big error message that reports a Next-Hop MTU smaller than 1280 bytes (the minimum IPv6 MTU) MUST NOT include a Fragment header in subsequent packets sent to the corresponding destination. That is, IPv6 nodes MUST NOT generate IPv6 atomic fragments."</t>
</list>
</t>

</section>


<section title="Updating RFC6145" anchor="update-rfc6145">

<t>The following text from Section 4 (Translating from IPv4 to IPv6) of <xref target="RFC6145"/>:
<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   When the IPv4 sender does not set the DF bit, the translator SHOULD
   always include an IPv6 Fragment Header to indicate that the sender
   allows fragmentation.  The translator MAY provide a configuration
   function that allows the translator not to include the Fragment
   Header for the non-fragmented IPv6 packets.

   The rules in Section 4.1 ensure that when packets are fragmented,
   either by the sender or by IPv4 routers, the low-order 16 bits of the
   fragment identification are carried end-to-end, ensuring that packets
   are correctly reassembled.  In addition, the rules in Section 4.1 use
   the presence of an IPv6 Fragment Header to indicate that the sender
   might not be using path MTU discovery (i.e., the packet should not
   have the DF flag set should it later be translated back to IPv4).
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>


is formally replaced with:

<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   The rules in Section 4.1 ensure that when packets are fragmented,
   either by the sender or by IPv4 routers, the low-order 16 bits of the
   fragment identification are carried end-to-end, ensuring that packets
   are correctly reassembled.
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>
</t>

<t>The following text from Section 4.1 ("Translating IPv4 Headers into IPv6 Headers") of <xref target="RFC6145"/>:
<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   If there is a need to add a Fragment Header (the DF bit is not set or
   the packet is a fragment), the header fields are set as above with
   the following exceptions:
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>

is formally replaced with:
<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   If there is a need to add a Fragment Header (the packet is a 
   fragment), the header fields are set as above with the following 
   exceptions:
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>
</t>


<t>The following text from Section 4.2 ("Translating ICMPv4 Headers into ICMPv6 Headers") of <xref target="RFC6145"/>:
<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
            Code 4 (Fragmentation Needed and DF was Set):  Translate to
               an ICMPv6 Packet Too Big message (Type 2) with Code set
               to 0.  The MTU field MUST be adjusted for the difference
               between the IPv4 and IPv6 header sizes, i.e.,
               minimum(advertised MTU+20, MTU_of_IPv6_nexthop,
               (MTU_of_IPv4_nexthop)+20).  Note that if the IPv4 router
               set the MTU field to zero, i.e., the router does not
               implement [RFC1191], then the translator MUST use the
               plateau values specified in [RFC1191] to determine a
               likely path MTU and include that path MTU in the ICMPv6
               packet.  (Use the greatest plateau value that is less
               than the returned Total Length field.)
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>

is formally replaced with:

<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
            Code 4 (Fragmentation Needed and DF was Set):  Translate to
               an ICMPv6 Packet Too Big message (Type 2) with Code set
               to 0.  The MTU field MUST be adjusted for the difference
               between the IPv4 and IPv6 header sizes, but MUST NOT be
               set to a value smaller than the minimum IPv6 MTU 
               (1280 bytes). That is, it should be set to maximum(1280, 
               minimum(advertised MTU+20, MTU_of_IPv6_nexthop, 
               (MTU_of_IPv4_nexthop)+20)).  Note that if the IPv4 router
               set the MTU field to zero, i.e., the router does not
               implement [RFC1191], then the translator MUST use the
               plateau values specified in [RFC1191] to determine a
               likely path MTU and include that path MTU in the ICMPv6
               packet.  (Use the greatest plateau value that is less
               than the returned Total Length field, but that is larger
               than or equal to 1280.)
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>
</t>


<t>The following text from Section 5 ("Translating from IPv6 to IPv4") of <xref target="RFC6145"/>:

<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   There are some differences between IPv6 and IPv4 (in the areas of
   fragmentation and the minimum link MTU) that affect the translation.
   An IPv6 link has to have an MTU of 1280 bytes or greater.  The
   corresponding limit for IPv4 is 68 bytes.  Path MTU discovery across
   a translator relies on ICMP Packet Too Big messages being received
   and processed by IPv6 hosts, including an ICMP Packet Too Big that
   indicates the MTU is less than the IPv6 minimum MTU.  This
   requirement is described in Section 5 of [RFC2460] (for IPv6's
   1280-octet minimum MTU) and Section 5 of [RFC1883] (for IPv6's
   previous 576-octet minimum MTU).

   In an environment where an ICMPv4 Packet Too Big message is
   translated to an ICMPv6 Packet Too Big message, and the ICMPv6 Packet
   Too Big message is successfully delivered to and correctly processed
   by the IPv6 hosts (e.g., a network owned/operated by the same entity
   that owns/operates the translator), the translator can rely on IPv6
   hosts sending subsequent packets to the same IPv6 destination with
   IPv6 Fragment Headers.  In such an environment, when the translator
   receives an IPv6 packet with a Fragment Header, the translator SHOULD
   generate the IPv4 packet with a cleared Don't Fragment bit, and with
   its identification value from the IPv6 Fragment Header, for all of
   the IPv6 fragments (MF=0 or MF=1).

   In an environment where an ICMPv4 Packet Too Big message is filtered
   (by a network firewall or by the host itself) or not correctly
   processed by the IPv6 hosts, the IPv6 host will never generate an
   IPv6 packet with the IPv6 Fragment Header.  In such an environment,
   the translator SHOULD set the IPv4 Don't Fragment bit.  While setting
   the Don't Fragment bit may create PMTUD black holes [RFC2923] if
   there are IPv4 links smaller than 1260 octets, this is considered
   safer than causing IPv4 reassembly errors [RFC4963].
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>


is formally replaced with:

<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   There are some differences between IPv6 and IPv4 (in the areas of
   fragmentation and the minimum link MTU) that affect the translation.
   An IPv6 link has to have an MTU of 1280 bytes or greater.  The
   corresponding limit for IPv4 is 68 bytes.  Path MTU discovery across
   a translator relies on ICMP Packet Too Big messages being received
   and processed by IPv6 hosts.

   The difference in the minimum MTUs of IPv4 and IPv6 is accommodated
   as follows:

     o  When translating an ICMPv4 "Fragmentation Needed" packet, the
        indicated MTU in the resulting ICMPv6 "Packet Too Big" will
        never be set to a value lower than 1280. This ensures that the
        IPv6 nodes will never have to encounter or handle Path MTU
        values lower than the minimum IPv6 link MTU of 1280. See
        Section 4.2.

     o  When the resulting IPv4 packet is smaller than or equal to 1260
        bytes, the translator MUST send the packet with a cleared Don't
        Fragment bit. Otherwise, the packet MUST be sent with the Don't 
        Fragment bit set. See Section 5.1.

   This approach allows Path MTU Discovery to operate end-to-end for
   paths whose MTU are not smaller than minimum IPv6 MTU of 1280 (which
   corresponds to MTU of 1260 in the IPv4 domain). On paths that have
   IPv4 links with MTU < 1260, the IPv4 router(s) connected to those
   links will fragment the packets in accordance with Section 2.3 of
   [RFC0791].
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>
</t>


<t>The following text from Section 5.1 ("Translating IPv6 Headers into IPv4 Headers") of <xref target="RFC6145"/>:
<figure>
<artwork><![CDATA[
   Identification:  All zero.  In order to avoid black holes caused by
      ICMPv4 filtering or non-[RFC2460]-compatible IPv6 hosts (a
      workaround is discussed in Section 6), the translator MAY provide
      a function to generate the identification value if the packet size
      is greater than 88 bytes and less than or equal to 1280 bytes.
      The translator SHOULD provide a method for operators to enable or
      disable this function.

   Flags:  The More Fragments flag is set to zero.  The Don't Fragment
      (DF) flag is set to one.  In order to avoid black holes caused by
      ICMPv4 filtering or non-[RFC2460]-compatible IPv6 hosts (a
      workaround is discussed in Section 6), the translator MAY provide
      a function as follows.  If the packet size is greater than 88
      bytes and less than or equal to 1280 bytes, it sets the DF flag to
      zero; otherwise, it sets the DF flag to one.  The translator
      SHOULD provide a method for operators to enable or disable this
      function.
]]></artwork>
</figure>

is formally replaced with:
<figure>
<artwork><![CDATA[
   Identification:  Set according to a Fragment Identification
      generator at the translator.

   Flags:  The More Fragments flag is set to zero.  The Don't Fragment
      (DF) flag is set as follows: If the packet size is less than or
      equal to 1260 bytes, it is set to zero; otherwise, it is set to
      one.
]]></artwork>
</figure>
</t>


<t>The following text from Section 5.1.1 ("IPv6 Fragment Processing") of <xref target="RFC6145"/>:
<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   If a translated packet with DF set to 1 will be larger than the MTU
   of the next-hop interface, then the translator MUST drop the packet
   and send the ICMPv6 Packet Too Big (Type 2, Code 0) error message to
   the IPv6 host with an adjusted MTU in the ICMPv6 message.
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>


is formally replaced with:

<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   If an IPv6 packet that is smaller than or equal to 1280 bytes results
   (after translation) in an IPv4 packet that is larger than the MTU of 
   the next-hop interface, then the translator MUST perform IPv4 
   fragmentation on that packet such that it can be transferred over the
   constricting link.
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>
</t>


<t>Finally, the following text from 6 ("Special Considerations for ICMPv6 Packet Too Big") of <xref target="RFC6145"/>:
<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   Two recent studies analyzed the behavior of IPv6-capable web servers
   on the Internet and found that approximately 95% responded as
   expected to an IPv6 Packet Too Big that indicated MTU = 1280, but
   only 43% responded as expected to an IPv6 Packet Too Big that
   indicated an MTU < 1280.  It is believed that firewalls violating
   Section 4.3.1 of [RFC4890] are at fault.  Both failures (the 5% wrong
   response when MTU = 1280 and the 57% wrong response when MTU < 1280)
   will cause PMTUD black holes [RFC2923].  Unfortunately, the
   translator cannot improve the failure rate of the first case (MTU =
   1280), but the translator can improve the failure rate of the second
   case (MTU < 1280).  There are two approaches to resolving the problem
   with sending ICMPv6 messages indicating an MTU < 1280.  It SHOULD be
   possible to configure a translator for either of the two approaches.

   The first approach is to constrain the deployment of the IPv6/IPv4
   translator by observing that four of the scenarios intended for
   stateless IPv6/IPv4 translators do not have IPv6 hosts on the
   Internet (Scenarios 1, 2, 5, and 6 described in [RFC6144], which
   refer to "An IPv6 network").  In these scenarios, IPv6 hosts, IPv6-
   host-based firewalls, and IPv6 network firewalls can be administered
   in compliance with Section 4.3.1 of [RFC4890] and therefore avoid the
   problem witnessed with IPv6 hosts on the Internet.

   The second approach is necessary if the translator has IPv6 hosts,
   IPv6-host-based firewalls, or IPv6 network firewalls that do not (or
   cannot) comply with Section 5 of [RFC2460] -- such as IPv6 hosts on
   the Internet.  This approach requires the translator to do the
   following:

   1.  In the IPv4-to-IPv6 direction: if the MTU value of ICMPv4 Packet
       Too Big (PTB) messages is less than 1280, change it to 1280.
       This is intended to cause the IPv6 host and IPv6 firewall to
       process the ICMP PTB message and generate subsequent packets to
       this destination with an IPv6 Fragment Header.

       Note: Based on recent studies, this is effective for 95% of IPv6
       hosts on the Internet.

   2.  In the IPv6-to-IPv4 direction:

       A.  If there is a Fragment Header in the IPv6 packet, the last 16
           bits of its value MUST be used for the IPv4 identification
           value.

       B.  If there is no Fragment Header in the IPv6 packet:

           a.  If the packet is less than or equal to 1280 bytes:

               -  The translator SHOULD set DF to 0 and generate an IPv4
                  identification value.

               -  To avoid the problems described in [RFC4963], it is
                  RECOMMENDED that the translator maintain 3-tuple state
                  for generating the IPv4 identification value.

           b.  If the packet is greater than 1280 bytes, the translator
               SHOULD set the IPv4 DF bit to 1.
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>


is formally replaced with:

<figure>
<artwork><![CDATA[
   ---------------- cut here -------------- cut here ----------------
   A number of studies (see e.g. ) indicate that it not unusual for networks
   to drop ICMPv6 Packet Too Big error messages. Such packet drops will
   result in PMTUD blackholes [RFC2923], which can only be overcome with 
   PLPMTUD [RFC4821].
   ---------------- cut here -------------- cut here ----------------
]]></artwork>
</figure>
</t>

</section>

	
	<section title="IANA Considerations" anchor="iana-considerations">
<t>There are no IANA registries within this document. The RFC-Editor can remove this section before publication of this document as an RFC.</t>
</section>

    <section title="Security Considerations">

	<t>This document describes a Denial of Service (DoS) attack vector that leverages the widespread filtering of IPv6 fragments in the public Internet by means of ICMPv6 PTB error messages. Additionally, it formally updates <xref target="RFC2460"/> such that this attack vector is eliminated.</t>

    </section>

    <section title="Acknowledgements">
<t>The authors would like to thank (in alphabetical order) Bob Briscoe, Brian Carpenter, and Jeroen Massar for providing valuable comments on earlier versions of this document.</t>
<t>Fernando Gont would like to thank Jan Zorz and Go6 Lab &lt;http://go6lab.si/&gt; for providing access to systems and networks that were employed to produce some of tests that resulted in the publication of this document. Additionally, he would like to thank SixXS &lt;https://www.sixxs.net&gt; for providing IPv6 connectivity.</t>

    </section>


  </middle>

  <back>
  <references title='Normative References'>
	<?rfc include="reference.RFC.2460" ?>
	<?rfc include="reference.RFC.2119" ?>
	<?rfc include="reference.RFC.4443" ?>
	<?rfc include="reference.RFC.4821" ?>
	<?rfc include="reference.RFC.4861" ?>
	<?rfc include="reference.RFC.6145" ?>
  </references>

  <references title='Informative References'>
	<?rfc include="reference.RFC.2923" ?>
	<?rfc include="reference.RFC.5927" ?>
	<?rfc include="reference.RFC.6946" ?>
	<?rfc include="reference.I-D.gont-v6ops-ipv6-ehs-in-real-world" ?>

      <reference anchor="Morbitzer" target="https://www.ru.nl/publish/pages/578936/m_morbitzer_masterthesis.pdf">
        <front>
          <title>TCP Idle Scans in IPv6</title>

          <author fullname="Mathias Morbitzer" initials="M." surname="Morbitzer">
          </author>

          <date/>
        </front>

        <seriesInfo name=""
                    value="Master's Thesis. Thesis number: 670. Department of Computing Science, Radboud University Nijmegen. August 2013"/>
      </reference>

</references>

  </back>
</rfc>
