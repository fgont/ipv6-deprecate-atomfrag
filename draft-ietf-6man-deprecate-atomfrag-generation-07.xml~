<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc strict="no" ?>

<rfc 
	ipr="trust200902"
	category="info"
	docName="draft-ietf-6man-deprecate-atomfrag-generation-07">
  <front>
    <title abbrev="IPv6 Atomic Fragments Considered Harmful">Generation of IPv6 Atomic Fragments Considered Harmful</title>

    <author fullname="Fernando Gont" initials="F." surname="Gont">
      <organization abbrev="SI6 Networks / UTN-FRH">SI6 Networks / UTN-FRH</organization>

      <address>
        <postal>
          <street>Evaristo Carriego 2644</street>
          <code>1706</code>
          <city>Haedo</city>
          <region>Provincia de Buenos Aires</region>
          <country>Argentina</country>
        </postal>

        <phone>+54 11 4650 8472</phone>
        <email>fgont@si6networks.com</email>
        <uri>http://www.si6networks.com</uri>
      </address>
    </author>

<author fullname="Will(Shucheng) Liu" initials="W." surname="Liu">
      <organization>Huawei Technologies</organization>
      <address>
        <postal>
          <street>Bantian, Longgang District</street>
          <city>Shenzhen</city>
          <code>518129</code>
          <country>P.R. China</country>
        </postal>
        <email>liushucheng@huawei.com</email>
      </address>
</author>

    <author fullname="Tore Anderson" initials="T." surname="Anderson">
      <organization>Redpill Linpro</organization>
      <address>
        <postal>
          <street>Vitaminveien 1A</street>
          <code>0485</code>
          <city>Oslo</city>
          <country>Norway</country>
        </postal>
        <phone>+47 959 31 212</phone>
        <email>tore@redpill-linpro.com</email>
        <uri>http://www.redpill-linpro.com</uri>
      </address>
    </author>

    <date year="2016" />

    <area>Internet</area>
    <workgroup>IPv6 maintenance Working Group (6man)</workgroup>



    <abstract>
    <t>
This document discusses the security implications of the generation of IPv6 atomic fragments and a number of interoperability issues associated with IPv6 atomic fragments, and concludes that the aforementioned functionality is undesirable, thus documenting the motivation for removing this functionality in the revision of the core IPv6 protocol specification.
</t>
    </abstract>
  </front>

  <middle>
  
<section title="Introduction" anchor="intro">
<t>

<xref target="RFC2460"/> specifies the IPv6 fragmentation mechanism, which allows IPv6 packets to be fragmented into smaller pieces such that they can fit in the Path-MTU to the intended destination(s).</t>

<t>A legacy IPv4/IPv6 translator implementing the Stateless IP/ICMP Translation algorithm <xref target="RFC6145"/> may legitimately generate ICMPv6 "Packet Too Big" messages <xref target="RFC4443"/> advertising a "Next-Hop MTU" smaller than 1280 (the minimum IPv6 MTU). Section 5 of <xref target="RFC2460"/> states that, upon receiving such an ICMPv6 error message, hosts are not required to reduce the assumed Path-MTU, but must simply include a Fragment Header in all subsequent packets sent to that destination. The resulting packets will thus *not* be actually fragmented into several pieces, but rather be "atomic fragments" <xref target="RFC6946"/> (i.e., just include a Fragment Header with both the "Fragment Offset" and the "M" flag set to 0). <xref target="RFC6946"/> requires that these atomic fragments be essentially processed by the destination host as non-fragmented traffic (since there are not really any fragments to be reassembled). The goal of these atomic fragments is simply to convey an appropriate Identification value to be employed by IPv6/IPv4 translators for the resulting IPv4 fragments.</t>

<t>While atomic fragments might seem rather benign, there are scenarios in which the generation of IPv6 atomic fragments can be leveraged for performing a number of attacks against the corresponding IPv6 flows. Since there are concrete security implications arising from the generation of IPv6 atomic fragments, and there is no real gain in generating IPv6 atomic fragments (as opposed to e.g. having IPv6/IPv4 translators generate a Fragment Identification value themselves), we conclude that this functionality is undesirable.</t>

<t><xref target="attack-vector"/> briefly discusses the security implications of the generation of IPv6 atomic fragments, and describes a specific Denial of Service (DoS) attack vector that leverages the widespread filtering of IPv6 fragments in the public Internet. <xref target="additional-considerations"/> provides additional considerations regarding the usefulness of generating IPv6 atomic fragments.</t>

</section>



<!--
<section title="Terminology" anchor="terminology">

<t>
<list style="hanging">
<t hangText="IPv6 atomic fragments:">
<vspace blankLines="0" />IPv6 packets that contain a Fragment Header with the Fragment Offset set to 0 and the M flag set to 0 (as defined by <xref target="RFC6946"/>).</t>
</list>
</t>

    
         

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
   NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   RFC 2119 <xref target="RFC2119"/>.</t>
</section>
-->

<section title="Security Implications of the Generation of IPv6 Atomic Fragments" anchor="attack-vector">
<t>The security implications of IP fragmentation have been discussed at length in <xref target="RFC6274"/> and <xref target="RFC7739"/>. An attacker can leverage the generation of IPv6 atomic fragments to trigger the use of fragmentation in an arbitrary IPv6 flow and subsequently perform any fragmentation-based attack against legacy IPv6 nodes that do not implement <xref target="RFC6946"/>.</t>

<t>Unfortunately, even nodes that already implement <xref target="RFC6946"/> can be subject to DoS attacks as a result of the generation of IPv6 atomic fragments. Let us assume that Host A is communicating with Server B, and that, as a result of the widespread dropping of IPv6 packets that contain extension headers (including fragmentation) <xref target="RFC7872"/>, some intermediate node filters fragments between Host A and Server B.  If an attacker sends a forged ICMPv6 "Packet Too Big" (PTB) error message to server B, reporting an MTU smaller than 1280, this will trigger the generation of IPv6 atomic fragments from that moment on (as required by <xref target="RFC2460"/>). When server B starts sending IPv6 atomic fragments (in response to the received ICMPv6 PTB), these packets will be dropped, since we previously noted that IPv6 packets with extension headers were being dropped between Host A and Server B. Thus, this situation will result in a Denial of Service (DoS) scenario.
</t>

<t>Another possible scenario is that in which two BGP peers are employing IPv6 transport, and they implement Access Control Lists (ACLs) to drop IPv6 fragments (to avoid control-plane attacks). If the aforementioned BGP peers drop IPv6 fragments but still honor received ICMPv6 Packet Too Big error messages, an attacker could easily attack the peering session by simply sending an ICMPv6 PTB message with a reported MTU smaller than 1280 bytes. Once the attack packet has been sent, the aforementioned routers will themselves be the ones dropping their own traffic.
</t>


<t>The aforementioned attack vector is exacerbated by the following factors:
<list style="symbols">
<t>The attacker does not need to forge the IPv6 Source Address of his attack packets. Hence, deployment of simple BCP38 filters will not help as a counter-measure.</t>

<t>Only the IPv6 addresses of the IPv6 packet embedded in the ICMPv6 payload needs to be forged. While one could envision filtering devices enforcing BCP38-style filters on the ICMPv6 payload, the use of extension headers (by the attacker) could make this difficult, if at all possible.</t>

<t>Many implementations fail to perform validation checks on the received ICMPv6 error messages, as recommended in Section 5.2 of <xref target="RFC4443"/> and documented in <xref target="RFC5927"/>. It should be noted that in some cases, such as when an ICMPv6 error message has (supposedly) been elicited by a connection-less transport protocol (or some other connection-less protocol being encapsulated in IPv6), it may be virtually impossible to perform validation checks on the received ICMPv6 error message. And, because of IPv6 extension headers, the ICMPv6 payload might not even contain any useful information on which to perform validation checks.</t>

<t>Upon receipt of one of the aforementioned ICMPv6 "Packet Too Big" error messages, the Destination Cache <xref target="RFC4861"/> is usually updated to reflect that any subsequent packets to such destination should include a Fragment Header. This means that a single ICMPv6 "Packet Too Big" error message might affect multiple communication instances (e.g., TCP connections) with such destination.
</t>

<t>As noted in <xref target="additional-considerations"/>, SIIT (Stateless IP/ICMP Translation Algorithm) <xref
target="RFC6145"/>, including derivative protocols such as <xref target="RFC6146">Stateful NAT64</xref>, was the only technology making use of atomic fragments. Unfortunately, an IPv6 node cannot easily
limit its exposure to the aforementioned attack vector by only generating IPv6 atomic fragments towards IPv4 destinations behind a stateless translator. This is due to the fact that Section 3.3 of <xref target="RFC6052"/> encourages operators to use a Network-Specific Prefix
(NSP) that maps the IPv4 address space into IPv6. When an NSP is being
used, IPv6 addresses representing IPv4 nodes (reached through a
stateless translator) are indistinguishable from native IPv6 addresses.
</t>
</list>
</t>
</section>

<section title="Additional Considerations" anchor="additional-considerations">
<t>Besides the security assessment provided in <xref target="attack-vector"/>, it is interesting to evaluate the pros and cons of having an IPv6-to-IPv4 translating router rely on the generation of IPv6 atomic fragments.
</t>

<t>Relying on the generation of IPv6 atomic fragments implies a reliance on:
<list style="numbers">
<t>ICMPv6 packets arriving from the translator to the IPv6 node</t>
<t>The ability of the nodes receiving ICMPv6 PTB messages reporting an MTU smaller than 1280 bytes to actually produce atomic fragments</t>
<t>Support for IPv6 fragmentation on the IPv6 side of the translator</t>
<t>The ability of the translator implementation to access the information conveyed by the IPv6 Fragment Header</t>
</list>

Unfortunately,
<list style="numbers">
<t>There exists a fair share of evidence of ICMPv6 Packet Too Big messages being dropped on the public Internet (for instance, that is one of the reasons for which PLPMTUD <xref target="RFC4821"/> was produced). Therefore, relying on such messages being successfully delivered will affect the robustness of the protocol that relies on them.</t>
<t>A number of IPv6 implementations have been known to fail to generate IPv6 atomic fragments in response to ICMPv6 PTB messages reporting an MTU smaller than 1280 bytes (see <xref target="survey"/> for a small survey). Additionally, the results included in Section 6 of <xref target="RFC6145"/> note that 57% of the tested web servers failed to produce IPv6 atomic fragments in response to ICMPv6 PTB messages reporting an MTU smaller than 1280 bytes. Thus, any protocol relying on IPv6 atomic fragment generation for proper functioning will have interoperability problems with the aforementioned IPv6 stacks.
</t>
<t>IPv6 atomic fragment generation represents a case in which fragmented traffic is produced where otherwise it would not be needed. Since there is widespread filtering of IPv6 fragments in the public Internet <xref target="RFC7872"/>, this would mean that the (unnecessary) use of IPv6 fragmentation might result, unnecessarily, in a Denial of Service situation even in legitimate cases.
</t>
<t><!-- <xref target="JOOLS"/> provides evidence that some platforms may hinder access by a translator implementation to the information conveyed in an IPv6 Fragment Header.-->The packet-handling API at the node where the translator is running may obscure fragmentation-related information. In such scenarios, the information conveyed by the Fragment Header may be unavailable to the translator. <xref target="JOOL"/> discusses a sample framework (Linux Netfilter) that hinders access to the information conveyed in IPv6 atomic fragments.
</t>
</list>
</t>

<t>We note that SIIT essentially employs the Fragment Header of IPv6 atomic fragments to signal the translator how to set the DF bit of IPv4 datagrams (the DF bit is cleared when the IPv6 packet contains a Fragment Header, and is otherwise set to 1 when the IPv6 packet does not contain an IPv6 Fragment Header). Additionally, the translator will employ the low-order 16-bits of the IPv6 Fragment Identification for setting the IPv4 Fragment Identification. At least in theory, this is expected to reduce the IPv4 Identification collision rate in the following specific scenario:

<list style="numbers">
<t>An IPv6 node communicates with an IPv4 node (through SIIT).</t>
<t>The IPv4 node is located behind an IPv4 link with an MTU smaller than 1260 bytes. An IPv4 Path MTU of 1260 corresponds to an IPv6 Path MTU of 1280, due to an option-less IPv4 header being 20 bytes shorter than the IPv6 header.</t>
<t>ECMP routing <xref target="RFC2992"/> with more than one translator is employed for e.g., redundancy purposes.</t>
</list>
</t>

<t>
In such a scenario, if each translator were to select the IPv4 Identification on its own (rather than selecting the IPv4 Identification from the low-order 16-bits of the Fragment Identification of IPv6 atomic fragments), this could possibly lead to IPv4 Identification collisions. However, since a number of implementations set the IPv6 Fragment Identification according to the output of a Pseudo-Random Number Generator (PRNG) (see Appendix B of <xref target="RFC7739"/>) and the translator only employs the low-order 16-bits of such value, it is very unlikely that relying on the Fragment Identification of the IPv6 atomic fragment will result in a reduced IPv4 Identification collision rate (when compared to the case where the translator selects each IPv4 Identification on its own). Besides, because of the limited sized of the IPv4 identification field, it is nevertheless virtually impossible to guarantee uniqueness of the IPv4 identification values without artificially limiting the data rate of fragmented traffic <xref target="RFC6864"/> <xref target="RFC4963"/>.
</t>


<!--
<t>Finally, we note that <xref target="RFC6145"/> was the only "consumer" of IPv6 atomic fragments, and it correctly and diligently noted (in Section 6) the possible interoperability problems of relying on IPv6 atomic fragments, proposing a workaround that leads to more robust behavior and simplified code. <xref target="RFC6145"/> has been obsoleted by <xref target="RFC7915"/>, such that SIIT does not rely on IPv6 atomic fragments.
</t>
-->

<t><xref target="RFC6145"/> was the only "consumer" of IPv6 atomic fragments, and it correctly and diligently noted (in Section 6) the possible  interoperability problems of relying on IPv6 atomic fragments, proposing a workaround that led to more robust behavior and simplified code. <xref target="RFC6145"/> has been obsoleted by <xref target="RFC7915"/>, such that SIIT does not rely on IPv6 atomic fragments.</t>

<t>
Finally, we believe that IPv4 links with an MTU smaller than 1260 bytes are very uncommonly found in the modern Internet. At the same time, we note that the sole purpose of IPv6 atomic fragments is to make such links compatible with IPv4/IPv6 translation. We surmise, therefore, that IPv6 atomic fragments are useful in only a miniscule number of "real world" situations.
</t>

</section>


<section title="Conclusions" anchor="conclusions">
<t>Taking all of the above considerations into account, we recommend
  that IPv6 atomic fragments be deprecated.</t>

<t>
  In particular:
<list style="symbols">
<t>IPv4/IPv6 translators should be updated to not generate ICMPv6 Packet Too Big errors containing a Path MTU value smaller than the minimum IPv6 MTU of 1280 bytes. This will ensure that current IPv6 nodes will never have a legitimate need to start generating IPv6 atomic fragments.
</t>

<t>The recommendation in the previous bullet ensures there no longer are any valid reasons for ICMPv6 Packet Too Big errors containing a Path MTU value smaller than the minimum IPv6 MTU to exist. IPv6 nodes should therefore be updated to ignore them as invalid.</t>
</list>

We note that these recommendations have been incorporated in <xref target="I-D.ietf-6man-rfc1981bis"/>, <xref target="I-D.ietf-6man-rfc2460bis"/> and <xref target="RFC7915"/>.
</t>
</section>
	
	<section title="IANA Considerations" anchor="iana-considerations">
<t>There are no IANA registries within this document.</t>
</section>

    <section title="Security Considerations">

	<t>This document briefly discusses the security implications of the generation of IPv6 atomic fragments, and describes a specific Denial of Service (DoS) attack vector that leverages the widespread filtering of IPv6 fragments in the public Internet. It concludes that the generation of IPv6 atomic fragments is an undesirable feature, and documents the motivation for removing this functionality from <xref target="I-D.ietf-6man-rfc2460bis"/>.</t>

    </section>

    <section title="Acknowledgements">
<t>The authors would like to thank (in alphabetical order) Congxiao Bao, Carlos Jesus Bernardos Cano, Bob Briscoe, Brian Carpenter, Tatuya Jinmei, Bob Hinden, Alberto Leiva, Ted Lemon, Xing Li,  Jeroen Massar, Erik Nordmark, Qiong Sun, Ole Troan, Tina Tsou, and Bernie Volz, for providing valuable comments on earlier versions of this document.</t>

<t>Fernando Gont would like to thank Jan Zorz / Go6 Lab &lt;http://go6lab.si/&gt;, and Jared Mauch / NTT America, for providing access to systems and networks that were employed to produce some of the tests that resulted in the publication of this document. Additionally, he would like to thank SixXS &lt;https://www.sixxs.net&gt; for providing IPv6 connectivity.</t>

    </section>


  </middle>

  <back>
  <references title='Normative References'>
	<?rfc include="reference.RFC.2460" ?>
	<?rfc include="reference.RFC.4443" ?>
	<?rfc include="reference.RFC.4821" ?>
	<?rfc include="reference.RFC.4861" ?>
	<?rfc include="reference.RFC.6145" ?>
	<?rfc include="reference.RFC.7915" ?>
	<?rfc include="reference.RFC.6864" ?>
  </references>

  <references title='Informative References'>
	<?rfc include="reference.RFC.2992" ?>
	<?rfc include="reference.RFC.5927" ?>
	<?rfc include="reference.RFC.4963" ?>
	<?rfc include="reference.RFC.6052" ?>
	<?rfc include="reference.RFC.6146" ?>
	<?rfc include="reference.RFC.6274" ?>
	<?rfc include="reference.RFC.6946" ?>
	<?rfc include="reference.RFC.7739" ?>
	<?rfc include="reference.RFC.7872" ?>
	<?rfc include="reference.I-D.ietf-6man-rfc2460bis" ?>
	<?rfc include="reference.I-D.ietf-6man-rfc1981bis" ?>

      <reference anchor="Morbitzer" target="http://www.ru.nl/publish/pages/769526/m_morbitzer_masterthesis.pdf">
        <front>
          <title>TCP Idle Scans in IPv6</title>

          <author fullname="Mathias Morbitzer" initials="M." surname="Morbitzer">
          </author>

          <date/>
        </front>

        <seriesInfo name=""
                    value="Master's Thesis. Thesis number: 670. Department of Computing Science, Radboud University Nijmegen. August 2013"/>
      </reference>


      <reference anchor="JOOL" target="https://github.com/NICMx/Jool/wiki/nf_defrag_ipv4-and-nf_defrag_ipv6#implementation-gotchas">
        <front>
          <title>nf_defrag_ipv4 and nf_defrag_ipv6</title>

          <author fullname="Alberto Leiva Popper" initials="A." surname="Leiva Popper">
          </author>

          <date/>
        </front>

        <seriesInfo name=""
                    value="April 2015"/>
      </reference>


</references>

<section title="Small Survey of OSes that Fail to Produce IPv6 Atomic Fragments" anchor="survey">
<t>[This section will probably be removed from this document before it is published as an RFC].</t>

<t>This section includes a non-exhaustive list of operating systems that *fail* to produce IPv6 atomic fragments. It is based on the results published in <xref target="RFC6946"/> and <xref target="Morbitzer"/>. It is simply meant as a datapoint regarding the extent to which IPv6 implementations can be relied upon to generate IPv6 atomic fragments.</t>

<t>The following Operating Systems fail to generate IPv6 atomic fragments in response to ICMPv6 PTB messages that report an MTU smaller than 1280 bytes:

<list style="symbols">
<t>FreeBSD 8.0</t>
<t>Linux kernel 2.6.32</t>
<t>Linux kernel 3.2</t>
<t>Mac OS X 10.6.7</t>
<t>NetBSD 5.1</t>
</list>
</t>
</section>
  </back>

</rfc>
